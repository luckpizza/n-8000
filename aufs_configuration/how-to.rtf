{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Adding AUFS support to a n-8000 kernel\
\
Please before reading this how-to, take a look at the one for building a kernel with the default configuration. it contains the basic step to build a kernel\
\
1. Get the AUFS sources:\
go to your working directory (will assume you have a folder with the kernel and the gcc toolchain there) and clone the source with:\
  git clone {\field{\*\fldinst{HYPERLINK "http://aufs.git.sourceforge.net/git/gitweb.cgi?p=aufs/aufs3-standalone.git;a=summary"}}{\fldrslt 
\f1 \cf2 \ul \ulc2 git://aufs.git.sourceforge.net/gitroot/aufs/aufs3-standalone.git}}
\f1 \cf2 \ul \ulc2  \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0 \cf0 \ulnone   cd aufs3-standalone\
Checkout to the right branch, in our case the N-8000 kernel is base on linux 3.0 kernel, so we can do this doing:\
 git checkout origin/aufs3.0\
\
2. Copy necessary files\
\
  copy files from Documentation and fs  as well as include/linux/aufs_type.h to the corresponding kernel folders\
\
  Copy the following .patch files to the kernel root directory:\
     cp aufs3-base.patch ../n8000-kernel/\
     cp aufs3-kbuild.patch ../n8000-kernel/\
     cp aufs3-proc_map.patch ../n8000-kernel/\
     cp aufs3-standalone.patch ../n8000-kernel/\
\
3. Apply the patches\
\
    patch -p1 < aufs3-base.patch\
    patch -p1 < aufs3-kbuild.patch\
    patch -p1 < aufs3-proc_map.patch\
    patch -p1 < aufs3-standalone.patch\
\
\
4. Compile the kernel\
Compiling the kernel and modules should be as easy as executing:\
    make\
The compiled kernel should be as usual in\
    arch/arm/boot/zImage\
and the new module should be in: \
    fs/aufs/aufs.ko\
\
\
5. Troubleshooting \
  - When applying patches\
  it may happen, that when trying to apply the aufs3-kbuild.patch the following error appear:\
    patching file fs/Makefile\
    Hunk #1 FAILED at 124.\
    1 out of 1 hunk FAILED -- saving rejects to file fs/Makefile.rej\
A workaround it to open the fs/Makefile and add the patch my hand, this is adding at the end of the file:\
  #Patched for AUFS\
   obj-$(CONFIG_AUFS_FS)           += aufs/\
 - When compiling:\
If you get the following error while compiling:\
\
    Building modules, stage 2.\
    MODPOST 4 modules\
    ERROR: "deny_write_access" [fs/aufs/aufs.ko] undefined! \
    ERROR: "do_truncate" [fs/aufs/aufs.ko] undefined! \
    ERROR: "do_splice_from" [fs/aufs/aufs.ko] undefined!\
    ERROR: "cap_file_mmap" [fs/aufs/aufs.ko] undefined!\
    ERROR: "lookup_hash" [fs/aufs/aufs.ko] undefined!\
    ERROR: "__devcgroup_inode_permission" [fs/aufs/aufs.ko] undefined!\
    ERROR: "do_splice_to" [fs/aufs/aufs.ko] undefined!\
    ERROR: "file_sb_list_del" [fs/aufs/aufs.ko] undefined!\
    ERROR: "inode_sb_list_lock" [fs/aufs/aufs.ko] undefined!\
    make[1]: *** [__modpost] Error 1\
    make: *** [modules] Error 2\
\
be sure to apply the aufs3-standalone patch, it is necessary!\
}